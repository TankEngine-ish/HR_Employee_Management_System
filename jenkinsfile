pipeline {
    agent any
    environment {
        DOCKER_USERNAME = credentials('dockerhub-username')
        DOCKER_PASSWORD = credentials('dockerhub-password')
        DOCKER_REPO = 'tankengine'
        ENV_FILE_PATH = '.env' // Path to your .env file
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/TankEngine-ish/property_management_system_full_stack_app'
            }
        }

        stage('Run Unit Tests') {
            parallel {
                stage('Go Unit Tests') {
                    steps {
                        dir('backend') {
                            sh 'go test ./... -v'
                        }
                    }
                }
                stage('Frontend Unit Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm install'
                            sh 'npm test'
                        }
                    }
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                script {
                    // Bring up services with the .env file
                    sh 'docker compose --env-file $ENV_FILE_PATH up -d'

                    // Run Cypress tests
                    sh 'docker compose run --rm cypress'

                    // Tear down services
                    sh 'docker compose down'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                // Build all Docker images using docker-compose
                sh 'docker compose --env-file $ENV_FILE_PATH build'
            }
        }

        stage('Push Docker Images') {
            steps {
                sh """
                docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

                docker tag nextapp:latest ${DOCKER_REPO}/nextapp:latest
                docker push ${DOCKER_REPO}/nextapp:latest

                docker tag goapp:latest ${DOCKER_REPO}/goapp:latest
                docker push ${DOCKER_REPO}/goapp:latest

                docker tag postgres:latest ${DOCKER_REPO}/postgres:latest
                docker push ${DOCKER_REPO}/postgres:latest
                """
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
